
////
This file is generated! See _meta/fields.yml and scripts/generate_field_docs.py
////

[[exported-fields]]
= Exported fields

[partintro]

--
This document describes the fields that are exported by rmqbeat. They are
grouped in the following categories:

* <<exported-fields-beat>>
* <<exported-fields-cloud>>
* <<exported-fields-docker-processor>>
* <<exported-fields-host-processor>>
* <<exported-fields-kubernetes-processor>>
* <<exported-fields-rmqbeat>>

--
[[exported-fields-beat]]
== Beat fields

Contains common beat fields available in all event types.



*`beat.name`*::
+
--
The name of the Beat sending the log messages. If the Beat name is set in the configuration file, then that value is used. If it is not set, the hostname is used. To set the Beat name, use the `name` option in the configuration file.


--

*`beat.hostname`*::
+
--
The hostname as returned by the operating system on which the Beat is running.


--

*`beat.timezone`*::
+
--
The timezone as returned by the operating system on which the Beat is running.


--

*`beat.version`*::
+
--
The version of the beat that generated this event.


--

*`@timestamp`*::
+
--
type: date

example: August 26th 2016, 12:35:53.332

format: date

required: True

The timestamp when the event log record was generated.


--

*`tags`*::
+
--
Arbitrary tags that can be set per Beat and per transaction type.


--

*`fields`*::
+
--
type: object

Contains user configurable fields.


--

[float]
== error fields

Error fields containing additional info in case of errors.



*`error.message`*::
+
--
type: text

Error message.


--

*`error.code`*::
+
--
type: long

Error code.


--

*`error.type`*::
+
--
type: keyword

Error type.


--

[[exported-fields-cloud]]
== Cloud provider metadata fields

Metadata from cloud providers added by the add_cloud_metadata processor.



*`meta.cloud.provider`*::
+
--
example: ec2

Name of the cloud provider. Possible values are ec2, gce, or digitalocean.


--

*`meta.cloud.instance_id`*::
+
--
Instance ID of the host machine.


--

*`meta.cloud.instance_name`*::
+
--
Instance name of the host machine.


--

*`meta.cloud.machine_type`*::
+
--
example: t2.medium

Machine type of the host machine.


--

*`meta.cloud.availability_zone`*::
+
--
example: us-east-1c

Availability zone in which this host is running.


--

*`meta.cloud.project_id`*::
+
--
example: project-x

Name of the project in Google Cloud.


--

*`meta.cloud.region`*::
+
--
Region in which this host is running.


--

[[exported-fields-docker-processor]]
== Docker fields

Docker stats collected from Docker.




*`docker.container.id`*::
+
--
type: keyword

Unique container id.


--

*`docker.container.image`*::
+
--
type: keyword

Name of the image the container was built on.


--

*`docker.container.name`*::
+
--
type: keyword

Container name.


--

*`docker.container.labels`*::
+
--
type: object

Image labels.


--

[[exported-fields-host-processor]]
== Host fields

Info collected for the host machine.




*`host.name`*::
+
--
type: keyword

Hostname.


--

*`host.id`*::
+
--
type: keyword

Unique host id.


--

*`host.architecture`*::
+
--
type: keyword

Host architecture (e.g. x86_64, arm, ppc, mips).


--

*`host.os.platform`*::
+
--
type: keyword

OS platform (e.g. centos, ubuntu, windows).


--

*`host.os.version`*::
+
--
type: keyword

OS version.


--

*`host.os.family`*::
+
--
type: keyword

OS family (e.g. redhat, debian, freebsd, windows).


--

[[exported-fields-kubernetes-processor]]
== Kubernetes fields

Kubernetes metadata added by the kubernetes processor




*`kubernetes.pod.name`*::
+
--
type: keyword

Kubernetes pod name


--

*`kubernetes.namespace`*::
+
--
type: keyword

Kubernetes namespace


--

*`kubernetes.node.name`*::
+
--
type: keyword

Kubernetes node name


--

*`kubernetes.labels`*::
+
--
type: object

Kubernetes labels map


--

*`kubernetes.annotations`*::
+
--
type: object

Kubernetes annotations map


--

*`kubernetes.container.name`*::
+
--
type: keyword

Kubernetes container name


--

*`kubernetes.container.image`*::
+
--
type: keyword

Kubernetes container image


--

[[exported-fields-rmqbeat]]
== rmqbeat fields

None


[float]
== rabbitmq fields

RabbitMQ Message Metadata.



*`rabbitmq.action`*::
+
--
type: keyword

required: False

For tracing either 'publish' or 'deliver'. For normal consumer always 'receive'.


--

*`rabbitmq.channel`*::
+
--
type: long

required: False

Channel number of the client which performed action (trace only).


--

*`rabbitmq.connection`*::
+
--
type: keyword

required: False

Connection name of the client which performed action (trace only).


--

*`rabbitmq.user`*::
+
--
type: keyword

required: False

User that performed the action (trace only).


--

*`rabbitmq.consumer_tag`*::
+
--
type: keyword

Consumer tag (direct consume only).


--

[float]
== headers fields

Message header field table.


*`rabbitmq.exchange`*::
+
--
type: keyword

required: False

Specifies the name of the exchange that the message was originally published to. May be empty, indicating the default exchange.


--

*`rabbitmq.queue`*::
+
--
type: keyword

required: False

Specifies the name of the queue message was consumed from (tracer only).


--

*`rabbitmq.routed_queues`*::
+
--
type: array

required: False

Specifies names of queues message was routed to (tracer only).


--

*`rabbitmq.redelivered`*::
+
--
type: boolean

required: False

Specifies if message was redelivered.


--

*`rabbitmq.routing_key`*::
+
--
type: keyword

required: False

Specifies the routing key name specified when the message was published.


--

[float]
== payload fields

Payload Information



*`rabbitmq.payload.size`*::
+
--
type: long

required: True

Size of payload in bytes


--

*`rabbitmq.payload.body`*::
+
--
type: text

required: False

Decoded payload body


--

*`rabbitmq.payload.hash`*::
+
--
type: keyword

required: False

Payload hash


--

[float]
== properties fields

AMQP message properties.



*`rabbitmq.properties.app_id`*::
+
--
type: keyword

required: False

Creating application id.


--

*`rabbitmq.properties.content_encoding`*::
+
--
type: keyword

required: False

MIME content encoding.


--

*`rabbitmq.properties.content_type`*::
+
--
type: keyword

required: False

MIME content type.


--

*`rabbitmq.properties.correlation_id`*::
+
--
type: keyword

required: False

Application correlation identifier.


--

*`rabbitmq.properties.delivery_mode`*::
+
--
type: keyword

required: False

Non-persistent (1) or persistent (2).


--

*`rabbitmq.properties.expiration`*::
+
--
required: False

Message expiration specification.


--

*`rabbitmq.properties.message_id`*::
+
--
type: keyword

required: False

Application message identifier.


--

*`rabbitmq.properties.priority`*::
+
--
type: keyword

required: False

Message priority, 0 to 9.


--

*`rabbitmq.properties.reply_to`*::
+
--
type: keyword

required: False

Address to reply to.


--

*`rabbitmq.properties.timestamp`*::
+
--
type: date

required: False

Message timestamp.


--

*`rabbitmq.properties.type`*::
+
--
type: keyword

required: False

Message type name.


--

*`rabbitmq.properties.user_id`*::
+
--
type: keyword

required: False

Creating user id.


--




*`rabbitmq.event.binding.created.arguments`*::
+
--
type: keyword

--

*`rabbitmq.event.binding.created.destination_kind`*::
+
--
type: keyword

--

*`rabbitmq.event.binding.created.destination_name`*::
+
--
type: keyword

--

*`rabbitmq.event.binding.created.routing_key`*::
+
--
type: keyword

--

*`rabbitmq.event.binding.created.source_kind`*::
+
--
type: keyword

--

*`rabbitmq.event.binding.created.source_name`*::
+
--
type: keyword

--

*`rabbitmq.event.binding.created.user_who_performed_action`*::
+
--
type: keyword

--

*`rabbitmq.event.binding.created.vhost`*::
+
--
type: keyword

--


*`rabbitmq.event.binding.deleted.arguments`*::
+
--
type: keyword

--

*`rabbitmq.event.binding.deleted.destination_kind`*::
+
--
type: keyword

--

*`rabbitmq.event.binding.deleted.destination_name`*::
+
--
type: keyword

--

*`rabbitmq.event.binding.deleted.routing_key`*::
+
--
type: keyword

--

*`rabbitmq.event.binding.deleted.source_kind`*::
+
--
type: keyword

--

*`rabbitmq.event.binding.deleted.source_name`*::
+
--
type: keyword

--

*`rabbitmq.event.binding.deleted.user_who_performed_action`*::
+
--
type: keyword

--

*`rabbitmq.event.binding.deleted.vhost`*::
+
--
type: keyword

--



*`rabbitmq.event.channel.closed.pid`*::
+
--
type: keyword

--

*`rabbitmq.event.channel.closed.user_who_performed_action`*::
+
--
type: keyword

--


*`rabbitmq.event.channel.created.connection`*::
+
--
type: keyword

--

*`rabbitmq.event.channel.created.name`*::
+
--
type: keyword

--

*`rabbitmq.event.channel.created.number`*::
+
--
type: long

--

*`rabbitmq.event.channel.created.pid`*::
+
--
type: keyword

--

*`rabbitmq.event.channel.created.user`*::
+
--
type: keyword

--

*`rabbitmq.event.channel.created.user_who_performed_action`*::
+
--
type: keyword

--

*`rabbitmq.event.channel.created.vhost`*::
+
--
type: keyword

--





*`rabbitmq.event.connection.closed.client_properties.capabilities.authentication_failure_close`*::
+
--
type: boolean

--


*`rabbitmq.event.connection.closed.client_properties.capabilities.basic.nack`*::
+
--
type: boolean

--


*`rabbitmq.event.connection.closed.client_properties.capabilities.connection.blocked`*::
+
--
type: boolean

--

*`rabbitmq.event.connection.closed.client_properties.capabilities.consumer_cancel_notify`*::
+
--
type: boolean

--

*`rabbitmq.event.connection.closed.client_properties.capabilities.exchange_exchange_bindings`*::
+
--
type: boolean

--

*`rabbitmq.event.connection.closed.client_properties.capabilities.publisher_confirms`*::
+
--
type: boolean

--

*`rabbitmq.event.connection.closed.client_properties.connection_name`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.closed.client_properties.copyright`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.closed.client_properties.information`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.closed.client_properties.platform`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.closed.client_properties.product`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.closed.client_properties.version`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.closed.name`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.closed.node`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.closed.pid`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.closed.user_provided_name`*::
+
--
type: keyword

--


*`rabbitmq.event.connection.created.auth_mechanism`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.channel_max`*::
+
--
type: long

--



*`rabbitmq.event.connection.created.client_properties.capabilities.authentication_failure_close`*::
+
--
type: boolean

--


*`rabbitmq.event.connection.created.client_properties.capabilities.basic.nack`*::
+
--
type: boolean

--


*`rabbitmq.event.connection.created.client_properties.capabilities.connection.blocked`*::
+
--
type: boolean

--

*`rabbitmq.event.connection.created.client_properties.capabilities.consumer_cancel_notify`*::
+
--
type: boolean

--

*`rabbitmq.event.connection.created.client_properties.capabilities.exchange_exchange_bindings`*::
+
--
type: boolean

--

*`rabbitmq.event.connection.created.client_properties.capabilities.publisher_confirms`*::
+
--
type: boolean

--

*`rabbitmq.event.connection.created.client_properties.connection_name`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.client_properties.copyright`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.client_properties.information`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.client_properties.platform`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.client_properties.product`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.client_properties.version`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.connected_at`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.frame_max`*::
+
--
type: long

--

*`rabbitmq.event.connection.created.host`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.name`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.node`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.peer_cert_issuer`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.peer_cert_subject`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.peer_cert_validity`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.peer_host`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.peer_port`*::
+
--
type: long

--

*`rabbitmq.event.connection.created.pid`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.port`*::
+
--
type: long

--

*`rabbitmq.event.connection.created.protocol`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.ssl`*::
+
--
type: boolean

--

*`rabbitmq.event.connection.created.ssl_cipher`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.ssl_hash`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.ssl_key_exchange`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.ssl_protocol`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.timeout`*::
+
--
type: long

--

*`rabbitmq.event.connection.created.type`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.user`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.user_provided_name`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.user_who_performed_action`*::
+
--
type: keyword

--

*`rabbitmq.event.connection.created.vhost`*::
+
--
type: keyword

--



*`rabbitmq.event.consumer.created.ack_required`*::
+
--
type: boolean

--

*`rabbitmq.event.consumer.created.channel`*::
+
--
type: keyword

--

*`rabbitmq.event.consumer.created.consumer_tag`*::
+
--
type: keyword

--

*`rabbitmq.event.consumer.created.exclusive`*::
+
--
type: boolean

--

*`rabbitmq.event.consumer.created.prefetch_count`*::
+
--
type: long

--

*`rabbitmq.event.consumer.created.queue`*::
+
--
type: keyword

--

*`rabbitmq.event.consumer.created.user_who_performed_action`*::
+
--
type: keyword

--

*`rabbitmq.event.consumer.created.vhost`*::
+
--
type: keyword

--


*`rabbitmq.event.consumer.deleted.channel`*::
+
--
type: keyword

--

*`rabbitmq.event.consumer.deleted.consumer_tag`*::
+
--
type: keyword

--

*`rabbitmq.event.consumer.deleted.queue`*::
+
--
type: keyword

--

*`rabbitmq.event.consumer.deleted.user_who_performed_action`*::
+
--
type: keyword

--

*`rabbitmq.event.consumer.deleted.vhost`*::
+
--
type: keyword

--



*`rabbitmq.event.exchange.created.arguments`*::
+
--
type: keyword

--

*`rabbitmq.event.exchange.created.auto_delete`*::
+
--
type: boolean

--

*`rabbitmq.event.exchange.created.durable`*::
+
--
type: boolean

--

*`rabbitmq.event.exchange.created.internal`*::
+
--
type: boolean

--

*`rabbitmq.event.exchange.created.name`*::
+
--
type: keyword

--

*`rabbitmq.event.exchange.created.policy`*::
+
--
type: keyword

--

*`rabbitmq.event.exchange.created.type`*::
+
--
type: keyword

--

*`rabbitmq.event.exchange.created.user_who_performed_action`*::
+
--
type: keyword

--

*`rabbitmq.event.exchange.created.vhost`*::
+
--
type: keyword

--


*`rabbitmq.event.exchange.deleted.name`*::
+
--
type: keyword

--

*`rabbitmq.event.exchange.deleted.user_who_performed_action`*::
+
--
type: keyword

--

*`rabbitmq.event.exchange.deleted.vhost`*::
+
--
type: keyword

--




*`rabbitmq.event.federation.link.status.exchange`*::
+
--
type: keyword

--

*`rabbitmq.event.federation.link.status.id`*::
+
--
type: keyword

--

*`rabbitmq.event.federation.link.status.local_connection`*::
+
--
type: keyword

--

*`rabbitmq.event.federation.link.status.status`*::
+
--
type: keyword

--

*`rabbitmq.event.federation.link.status.timestamp`*::
+
--
type: keyword

--

*`rabbitmq.event.federation.link.status.type`*::
+
--
type: keyword

--

*`rabbitmq.event.federation.link.status.upstream`*::
+
--
type: keyword

--

*`rabbitmq.event.federation.link.status.upstream_exchange`*::
+
--
type: keyword

--

*`rabbitmq.event.federation.link.status.uri`*::
+
--
type: keyword

--

*`rabbitmq.event.federation.link.status.vhost`*::
+
--
type: keyword

--



*`rabbitmq.event.node.deleted.node`*::
+
--
type: keyword

--



*`rabbitmq.event.node.node.deleted.route`*::
+
--
type: keyword

--



*`rabbitmq.event.parameter.cleared.component`*::
+
--
type: keyword

--

*`rabbitmq.event.parameter.cleared.name`*::
+
--
type: keyword

--

*`rabbitmq.event.parameter.cleared.user_who_performed_action`*::
+
--
type: keyword

--

*`rabbitmq.event.parameter.cleared.vhost`*::
+
--
type: keyword

--


*`rabbitmq.event.parameter.set.component`*::
+
--
type: keyword

--

*`rabbitmq.event.parameter.set.name`*::
+
--
type: keyword

--

*`rabbitmq.event.parameter.set.user_who_performed_action`*::
+
--
type: keyword

--

*`rabbitmq.event.parameter.set.value`*::
+
--
type: text

--

*`rabbitmq.event.parameter.set.vhost`*::
+
--
type: keyword

--



*`rabbitmq.event.permission.created.configure`*::
+
--
type: keyword

--

*`rabbitmq.event.permission.created.read`*::
+
--
type: keyword

--

*`rabbitmq.event.permission.created.user`*::
+
--
type: keyword

--

*`rabbitmq.event.permission.created.user_who_performed_action`*::
+
--
type: keyword

--

*`rabbitmq.event.permission.created.vhost`*::
+
--
type: keyword

--

*`rabbitmq.event.permission.created.write`*::
+
--
type: keyword

--



*`rabbitmq.event.policy.set.apply-to`*::
+
--
type: keyword

--


*`rabbitmq.event.policy.set.definition.expires`*::
+
--
type: long

--

*`rabbitmq.event.policy.set.definition.federation-upstream`*::
+
--
type: keyword

--

*`rabbitmq.event.policy.set.definition.ha-mode`*::
+
--
type: keyword

--

*`rabbitmq.event.policy.set.definition.ha-promote-on-failure`*::
+
--
type: keyword

--

*`rabbitmq.event.policy.set.definition.ha-promote-on-shutdown`*::
+
--
type: keyword

--

*`rabbitmq.event.policy.set.definition.ha-sync-mode`*::
+
--
type: keyword

--

*`rabbitmq.event.policy.set.name`*::
+
--
type: keyword

--

*`rabbitmq.event.policy.set.pattern`*::
+
--
type: keyword

--

*`rabbitmq.event.policy.set.priority`*::
+
--
type: long

--

*`rabbitmq.event.policy.set.user_who_performed_action`*::
+
--
type: keyword

--

*`rabbitmq.event.policy.set.vhost`*::
+
--
type: keyword

--



*`rabbitmq.event.queue.created.arguments`*::
+
--
type: keyword

--

*`rabbitmq.event.queue.created.auto_delete`*::
+
--
type: boolean

--

*`rabbitmq.event.queue.created.durable`*::
+
--
type: boolean

--

*`rabbitmq.event.queue.created.exclusive`*::
+
--
type: boolean

--

*`rabbitmq.event.queue.created.name`*::
+
--
type: keyword

--

*`rabbitmq.event.queue.created.owner_pid`*::
+
--
type: keyword

--

*`rabbitmq.event.queue.created.user_who_performed_action`*::
+
--
type: keyword

--

*`rabbitmq.event.queue.created.vhost`*::
+
--
type: keyword

--


*`rabbitmq.event.queue.deleted.name`*::
+
--
type: keyword

--

*`rabbitmq.event.queue.deleted.user_who_performed_action`*::
+
--
type: keyword

--

*`rabbitmq.event.queue.deleted.vhost`*::
+
--
type: keyword

--




*`rabbitmq.event.shovel.worker.status.dest_exchange`*::
+
--
type: keyword

--

*`rabbitmq.event.shovel.worker.status.dest_protocol`*::
+
--
type: keyword

--

*`rabbitmq.event.shovel.worker.status.dest_uri`*::
+
--
type: keyword

--

*`rabbitmq.event.shovel.worker.status.name`*::
+
--
type: keyword

--

*`rabbitmq.event.shovel.worker.status.src_protocol`*::
+
--
type: keyword

--

*`rabbitmq.event.shovel.worker.status.src_queue`*::
+
--
type: keyword

--

*`rabbitmq.event.shovel.worker.status.src_uri`*::
+
--
type: keyword

--

*`rabbitmq.event.shovel.worker.status.status`*::
+
--
type: keyword

--

*`rabbitmq.event.shovel.worker.status.vhost`*::
+
--
type: keyword

--

*`rabbitmq.event.type`*::
+
--
type: keyword

--




*`rabbitmq.event.user.authentication.success.auth_mechanism`*::
+
--
type: keyword

--

*`rabbitmq.event.user.authentication.success.connection_name`*::
+
--
type: keyword

--

*`rabbitmq.event.user.authentication.success.connection_type`*::
+
--
type: keyword

--

*`rabbitmq.event.user.authentication.success.host`*::
+
--
type: keyword

--

*`rabbitmq.event.user.authentication.success.name`*::
+
--
type: keyword

--

*`rabbitmq.event.user.authentication.success.peer_cert_issuer`*::
+
--
type: keyword

--

*`rabbitmq.event.user.authentication.success.peer_cert_subject`*::
+
--
type: keyword

--

*`rabbitmq.event.user.authentication.success.peer_cert_validity`*::
+
--
type: keyword

--

*`rabbitmq.event.user.authentication.success.peer_host`*::
+
--
type: keyword

--

*`rabbitmq.event.user.authentication.success.peer_port`*::
+
--
type: long

--

*`rabbitmq.event.user.authentication.success.protocol`*::
+
--
type: keyword

--

*`rabbitmq.event.user.authentication.success.ssl`*::
+
--
type: boolean

--

*`rabbitmq.event.user.authentication.success.ssl_cipher`*::
+
--
type: keyword

--

*`rabbitmq.event.user.authentication.success.ssl_protocol`*::
+
--
type: keyword

--


*`rabbitmq.event.user.created.name`*::
+
--
type: keyword

--

*`rabbitmq.event.user.created.user_who_performed_action`*::
+
--
type: keyword

--



*`rabbitmq.event.user.password.changed.name`*::
+
--
type: keyword

--

*`rabbitmq.event.user.password.changed.user_who_performed_action`*::
+
--
type: keyword

--



*`rabbitmq.event.user.tags.set.name`*::
+
--
type: keyword

--

*`rabbitmq.event.user.tags.set.user_who_performed_action`*::
+
--
type: keyword

--



*`rabbitmq.event.vhost.down.name`*::
+
--
type: keyword

--

*`rabbitmq.event.vhost.down.node`*::
+
--
type: keyword

--

*`rabbitmq.event.vhost.down.user_who_performed_action`*::
+
--
type: keyword

--

