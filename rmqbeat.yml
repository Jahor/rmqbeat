################### Rmqbeat Configuration Example #########################

############################# Rmqbeat ######################################

rmqbeat:
  - connection:
    # Name of connection that RabbitMQ displays in Management console. (client_property `connection_name`)
    #
    # Default: rmqbeat
    # name: rmqbeat

    # RabbitMQ server address(es)
    # host can either be a single host, or a list of hosts
    # i.e.
    #   host: "localhost"
    # or
    #   host: ["host01", "host02]
    #
    # if multiple hosts are provided on the initial connection and any subsequent
    # recovery attempts of the hosts is chosen at random and connected to.
    # Note that only one host connection is active at a time.
    #
    # Default: [localhost]
    host: localhost

    # RabbitMQ port to connect on
    #
    #  Default: 5672
    #port: 5672

    # The vhost (virtual host) to use. If you don't know what this
    # is, leave the default. With the exception of the default
    # vhost ("/"), names of vhosts should not begin with a forward
    # slash.
    #
    # Default: /
    #vhost: /

    # RabbitMQ username
    #
    # Default: guest
    #user: guest

    # RabbitMQ password
    #
    # Default: guest
    #password: guest

    # Set this to automatically recover from a broken connection. You almost certainly don't want to override this!!!
    #
    # Default: true
    #automatic_recovery: true

    # Time in seconds to wait before retrying a connection
    #
    # Default: 5s
    #connect_retry_interval: 5s

    # The default connection timeout in milliseconds. If not specified the timeout is infinite.
    #
    # Default: 20s
    #connection_timeout: 2s

    # Heartbeat delay in seconds. If unspecified no heartbeats will be sent
    #
    # Default: 25s
    # heartbeat: 25s
    #
    # ssl:
    # Use SSL. Default is false.
    #enabled: true

    # Configure SSL verification mode. If `none` is configured, all server hosts
    # and certificates will be accepted. In this mode, SSL based connections are
    # susceptible to man-in-the-middle attacks. Use only for testing. Default is
    # `full`.
    #verification_mode: full

    # List of supported/valid TLS versions. By default all TLS versions 1.0 up to
    # 1.2 are enabled.
    #supported_protocols: [TLSv1.0, TLSv1.1, TLSv1.2]

    # SSL configuration. By default is off.
    # List of root certificates for HTTPS server verifications
    #certificate_authorities: ["/etc/pki/root/ca.pem"]

    # Certificate for SSL client authentication
    #certificate: "/etc/pki/client/cert.pem"

    # Client Certificate Key
    #key: "/etc/pki/client/cert.key"

    # Optional passphrase for decrypting the Certificate Key.
    #key_passphrase: ''

    # Configure cipher suites to be used for SSL connections
    #cipher_suites: []

    # Configure curve types for ECDHE based cipher suites
    #curve_types: []

    queue:
      # The name of the queue rmqbeat will consume events from. If
      # left empty, a transient queue with an randomly chosen name
      # will be created.
      name: log

      # Is this queue durable? (aka; Should it survive a broker restart?)
      #
      # Default: true
      #durable: true

      # Should the queue be deleted on the broker when the last consumer
      # disconnects? Set this option to `false` if you want the queue to remain
      # on the broker, queueing up messages until a consumer comes along to
      # consume them.
      #
      # Default: false
      #auto_delete: false

      # Is the queue exclusive? Exclusive queues can only be used by the connection
      # that declared them and will be deleted when it is closed (e.g. due to a Logstash
      # restart).
      #
      # Default: false
      #exclusive: false

      # If true the queue will be passively declared, meaning it must
      # already exist on the server. To have Logstash create the queue
      # if necessary leave this option as false. If actively declaring
      # a queue that already exists, the queue options for this plugin
      # (durable etc) must match those of the existing queue.
      #
      # Default: false
      #passive: false

      # Extra queue arguments.
      # To make a RabbitMQ queue mirrored, use: `"x-ha-policy": "all"`
      #
      # Default: {}
      #arguments: {}

    exchange:
      # The name of the exchange rmqbeat will bind queue to. If
      # left empty, rmqbeat will not bind to any exchange
      name: amq.rabbitmq.log

      # The type of the exchange to bind to. Specifying this will cause this plugin
      # to declare the exchange if it does not exist.
      type:

      # Is this exchange durable? (aka; Should it survive a broker restart?)
      #
      # Default: true
      #durable: true

      # Should the exchange be deleted on the broker when the last queue
    # disconnects? Set this option to `false` if you want the queue to remain
    # on the broker, queueing up messages until a consumer comes along to
    # consume them.
    #
    # Default: false
      #auto_delete: false

    # Should the exchange be created internal.
    #
    # Default: false
    #internal: false

      # If true the queue will be passively declared, meaning it must
      # already exist on the server. To have Logstash create the queue
      # if necessary leave this option as false. If actively declaring
      # a queue that already exists, the queue options for this plugin
      # (durable etc) must match those of the existing queue.
      #
      # Default: false
      #passive: false

      # Extra exchange arguments.
      #
      # Default: {}
      #arguments: {}

    # The routing key to use when binding a queue to the exchange.
    # This is only relevant for direct or topic exchanges.
    #
    # * Routing keys are ignored on fanout exchanges.
    # * Wildcards are not valid on direct exchanges.
    routing_key: "#"

    # Extra binding arguments.
    #
    # Default: {}
    #routing_arguments: {}

    # Prefetch count. If acknowledgements are enabled with the `ack`
    # option, specifies the number of outstanding unacknowledged
    # messages allowed.
    #
    # Default: 256
    #prefetch_count: 256

    # Enable message acknowledgements. With acknowledgements
    # messages fetched by rmqbeat but not yet published
    # will be requeued by the server if rmqbeat
    # shuts down or disconnects. Acknowledgements will however hurt the message
    # throughput.
    #
    # Default: true
    ack: true

    # Mode for reading messages produced by RabbitMQ tracer published to
    # amq.rabbitmq.trace exchange.
    # Event produced will look like if it was received directly
    # And adding some more information like user, connection, channel
    # When true automatically populates exchange and routing key
    #
    # Default: false
    #tracer: false

    # Document type to publish.
    #
    # Default: rmqbeat
    #document_type: rmqbeat

    # Optional fields that you can specify to add additional information to the
    # output. Fields can be scalar values, arrays, dictionaries, or any nested
    # combination of these.
    #fields:
    #  env: staging

    # If this option is set to true, the custom fields are stored as top-level
    # fields in the output document instead of being grouped under a fields
    # sub-dictionary. Default is false.
    #fields_under_root: false

    # The tags of the shipper are included in their own field with each
    # transaction published. Tags make it easy to group servers by different
    # logical properties.
    #tags: ["service-X", "web-tier"]


#================================ General =====================================

# The name of the shipper that publishes the network data. It can be used to group
# all the transactions sent by a single shipper in the web interface.
#name:

# The tags of the shipper are included in their own field with each
# transaction published.
#tags: ["service-X", "web-tier"]

# Optional fields that you can specify to add additional information to the
# output.
#fields:
#  env: staging


#============================== Dashboards =====================================
# These settings control loading the sample dashboards to the Kibana index. Loading
# the dashboards is disabled by default and can be enabled either by setting the
# options here, or by using the `-setup` CLI flag or the `setup` command.
#setup.dashboards.enabled: false

# The URL from where to download the dashboards archive. By default this URL
# has a value which is computed based on the Beat name and version. For released
# versions, this URL points to the dashboard archive on the artifacts.elastic.co
# website.
#setup.dashboards.url:

#============================== Kibana =====================================

# Starting with Beats version 6.0.0, the dashboards are loaded via the Kibana API.
# This requires a Kibana endpoint configuration.
setup.kibana:

  # Kibana Host
  # Scheme and port can be left out and will be set to the default (http and 5601)
  # In case you specify and additional path, the scheme is required: http://localhost:5601/path
  # IPv6 addresses should always be defined as: https://[2001:db8::1]:5601
  #host: "localhost:5601"

#============================= Elastic Cloud ==================================

# These settings simplify using rmqbeat with the Elastic Cloud (https://cloud.elastic.co/).

# The cloud.id setting overwrites the `output.elasticsearch.hosts` and
# `setup.kibana.host` options.
# You can find the `cloud.id` in the Elastic Cloud web UI.
#cloud.id:

# The cloud.auth setting overwrites the `output.elasticsearch.username` and
# `output.elasticsearch.password` settings. The format is `<user>:<pass>`.
#cloud.auth:

#================================ Outputs =====================================

# Configure what output to use when sending the data collected by the beat.

#-------------------------- Elasticsearch output ------------------------------
output.elasticsearch:
  # Array of hosts to connect to.
  hosts: ["localhost:9200"]

  # Optional protocol and basic auth credentials.
  #protocol: "https"
  #username: "elastic"
  #password: "changeme"

#----------------------------- Logstash output --------------------------------
#output.logstash:
  # The Logstash hosts
  #hosts: ["localhost:5044"]

  # Optional SSL. By default is off.
  # List of root certificates for HTTPS server verifications
  #ssl.certificate_authorities: ["/etc/pki/root/ca.pem"]

  # Certificate for SSL client authentication
  #ssl.certificate: "/etc/pki/client/cert.pem"

  # Client Certificate Key
  #ssl.key: "/etc/pki/client/cert.key"

#================================ Logging =====================================

# Sets log level. The default log level is info.
# Available log levels are: error, warning, info, debug
#logging.level: debug

# At debug level, you can selectively enable logging only for some components.
# To enable all selectors use ["*"]. Examples of other selectors are "beat",
# "publish", "service".
#logging.selectors: ["*"]

#============================== Xpack Monitoring ===============================
# rmqbeat can export internal metrics to a central Elasticsearch monitoring
# cluster.  This requires xpack monitoring to be enabled in Elasticsearch.  The
# reporting is disabled by default.

# Set to true to enable the monitoring reporter.
#xpack.monitoring.enabled: false

# Uncomment to send the metrics to Elasticsearch. Most settings from the
# Elasticsearch output are accepted here as well. Any setting that is not set is
# automatically inherited from the Elasticsearch output configuration, so if you
# have the Elasticsearch output configured, you can simply uncomment the
# following line.
#xpack.monitoring.elasticsearch:
